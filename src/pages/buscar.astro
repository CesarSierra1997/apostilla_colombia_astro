---
import Layout from '../layouts/Layout.astro';
import apostillaLogo from "../assets/images/logo_claro.webp";

const url = Astro.url;
const query = url.searchParams.get('query') || '';
---

<Layout title={`Buscar: ${query}`} description="Buscador del sitio para encontrar contenido r√°pidamente">
  <main class="max-w-5xl mx-auto px-4 py-8 mt-8">
    <div class="text-center mb-8">
      <img src={apostillaLogo.src} alt="Logo Apostilla Colombia" class="w-50 h-50 scale-50 mx-auto" loading="lazy" />
      <h1 class="text-4xl font-bold mb-2">üîç Buscador del Sitio</h1>
      <p class="text-gray-600 dark:text-gray-400">Encuentra lo que necesitas r√°pidamente</p>
    </div>
    
    <div class="mb-8">
      <form id="searchForm" class="flex gap-2 max-w-3xl mx-auto">
        <input
          type="text"
          id="query"
          name="query"
          value={query}
          placeholder="Buscar apostilla, traducci√≥n, universidad..."
          class="flex-1 border border-gray-300 dark:border-gray-600 px-4 py-3 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 "
          autofocus
        />
        <button
          type="submit"
          class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition font-semibold"
        >
          Buscar
        </button>
      </form>
    </div>

    <div id="loading" class="hidden text-center py-4">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
      <p class="mt-2">Buscando...</p>
    </div>

    <div id="results-container">
      <div id="results-count" class="text-sm mb-4"></div>
      <div id="results" class="space-y-4"></div>
    </div>

    <div id="no-results" class="hidden text-center py-12">
      <div class="text-6xl mb-4">üòï</div>
      <p class="text-xl mb-2">
        No se encontraron resultados para "<span id="search-term" class="font-semibold"></span>"
      </p>
      <p>
        Intenta con otras palabras clave como: apostilla, traducci√≥n, universidad, registro civil
      </p>
    </div>
  </main>
</Layout>

<script>
  interface SearchResult {
    title: string;
    url: string;
    description: string;
    content: string;
  }

  // Funci√≥n para normalizar texto (quitar acentos, min√∫sculas)
  function normalizeText(text: string): string {
    return text
      .toLowerCase()
      .normalize("NFD")
      .replace(/[\u0300-\u036f]/g, "");
  }

  // Funci√≥n para calcular relevancia
  function calculateRelevance(page: SearchResult, query: string): number {
    const normalizedQuery = normalizeText(query);
    const queryWords = normalizedQuery.split(/\s+/).filter(w => w.length > 2);
    
    let score = 0;
    
    queryWords.forEach(word => {
      const titleNorm = normalizeText(page.title);
      const descNorm = normalizeText(page.description);
      const contentNorm = normalizeText(page.content);
      
      // T√≠tulo tiene m√°s peso
      if (titleNorm.includes(word)) score += 10;
      
      // Descripci√≥n tiene peso medio
      if (descNorm.includes(word)) score += 5;
      
      // Contenido tiene peso menor
      const contentMatches = (contentNorm.match(new RegExp(word, 'g')) || []).length;
      score += Math.min(contentMatches, 10);
    });
    
    return score;
  }

  // Funci√≥n para resaltar t√©rminos
  function highlightText(text: string, query: string): string {
    if (!query.trim()) return text;
    
    const words = query.split(/\s+/).filter(w => w.length > 2);
    let highlighted = text;
    
    words.forEach(word => {
      const regex = new RegExp(`(${word})`, 'gi');
      highlighted = highlighted.replace(
        regex, 
        '<mark class="bg-yellow-400 font-semibold px-1 rounded">$1</mark>'
      );
    });
    
    return highlighted;
  }

  // Funci√≥n para extraer snippet relevante
  function getRelevantSnippet(content: string, query: string, maxLength: number = 200): string {
    const normalized = normalizeText(content);
    const normalizedQuery = normalizeText(query);
    const words = normalizedQuery.split(/\s+/).filter(w => w.length > 2);
    
    // Buscar la primera aparici√≥n de cualquier palabra
    let bestIndex = -1;
    for (const word of words) {
      const index = normalized.indexOf(word);
      if (index !== -1 && (bestIndex === -1 || index < bestIndex)) {
        bestIndex = index;
      }
    }
    
    if (bestIndex === -1) {
      return content.slice(0, maxLength) + '...';
    }
    
    // Extraer contexto alrededor de la palabra
    const start = Math.max(0, bestIndex - 80);
    const end = Math.min(content.length, bestIndex + 120);
    
    let snippet = content.slice(start, end);
    if (start > 0) snippet = '...' + snippet;
    if (end < content.length) snippet = snippet + '...';
    
    return snippet;
  }

  // Funci√≥n principal de b√∫squeda
  async function performSearch(query: string) {
    const loading = document.getElementById('loading');
    const results = document.getElementById('results');
    const resultsCount = document.getElementById('results-count');
    const noResults = document.getElementById('no-results');
    const searchTerm = document.getElementById('search-term');

    if (!query.trim()) {
      if (results) results.innerHTML = '';
      if (resultsCount) resultsCount.textContent = '';
      if (noResults) noResults.classList.add('hidden');
      return;
    }

    // Mostrar loading
    if (loading) loading.classList.remove('hidden');
    if (results) results.innerHTML = '';
    if (resultsCount) resultsCount.textContent = '';
    if (noResults) noResults.classList.add('hidden');

    try {
      const response = await fetch('/search-index.json');
      if (!response.ok) throw new Error('Error cargando √≠ndice');
      
      const pages: SearchResult[] = await response.json();

      // Filtrar y calcular relevancia
      const resultsWithScore = pages
        .map(page => ({
          ...page,
          relevance: calculateRelevance(page, query)
        }))
        .filter(page => page.relevance > 0)
        .sort((a, b) => b.relevance - a.relevance);

      if (loading) loading.classList.add('hidden');

      if (resultsWithScore.length === 0) {
        if (searchTerm) searchTerm.textContent = query;
        if (noResults) noResults.classList.remove('hidden');
        return;
      }

      // Mostrar conteo
      if (resultsCount) {
        resultsCount.textContent = `${resultsWithScore.length} resultado${resultsWithScore.length !== 1 ? 's' : ''} encontrado${resultsWithScore.length !== 1 ? 's' : ''}`;
      }

      // Renderizar resultados
      if (results) {
        results.innerHTML = resultsWithScore
          .map((page, index) => {
            const snippet = page.description || getRelevantSnippet(page.content, query);
            const titleHighlighted = highlightText(page.title, query);
            const snippetHighlighted = highlightText(snippet, query);
            
            // Calcular porcentaje de relevancia
            const maxScore = resultsWithScore[0].relevance;
            const percentage = Math.round((page.relevance / maxScore) * 100);
            
            return `
              <article class="border border-gray-200 dark:border-gray-700 rounded-lg p-5 hover:shadow-xl transition-all bg-gray-100/20 relative overflow-hidden">
                <div class="absolute top-0 right-0 bg-blue-500 text-white text-xs px-3 py-1 rounded-bl-lg">
                  ${percentage}% relevante
                </div>
                <a href="${page.url}" class="block">
                  <h2 class="text-2xl font-bold text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300 mb-3 pr-20">
                    ${titleHighlighted}
                  </h2>
                  <p class="mb-3 leading-relaxed">
                    ${snippetHighlighted}
                  </p>
                  <div class="flex items-center justify-between">
                    <span class="text-sm text-gray-500">${page.url}</span>
                    <span class="text-blue-600 dark:text-blue-400 text-sm font-medium">
                      Ver m√°s ‚Üí
                    </span>
                  </div>
                </a>
              </article>
            `;
          })
          .join('');
      }
    } catch (error) {
      console.error('Error en b√∫squeda:', error);
      if (loading) loading.classList.add('hidden');
      if (results) {
        results.innerHTML = `
          <div class="text-red-600 dark:text-red-400 p-6 border border-red-200 dark:border-red-800 rounded-lg bg-red-50 dark:bg-red-900/20">
            <p class="font-semibold mb-2">‚ùå Error al realizar la b√∫squeda</p>
            <p class="text-sm">Por favor, intenta de nuevo m√°s tarde.</p>
          </div>
        `;
      }
    }
  }

  // Inicializaci√≥n
  const urlParams = new URLSearchParams(window.location.search);
  const initialQuery = urlParams.get('query') || '';
  
  if (initialQuery) {
    performSearch(initialQuery);
  }

  // Manejar formulario
  const form = document.getElementById('searchForm') as HTMLFormElement;
  if (form) {
    form.addEventListener('submit', (e) => {
      e.preventDefault();
      const input = document.getElementById('query') as HTMLInputElement;
      if (input && input.value.trim()) {
        const newQuery = input.value.trim();
        const newUrl = new URL(window.location.href);
        newUrl.searchParams.set('query', newQuery);
        window.history.pushState({}, '', newUrl);
        performSearch(newQuery);
      }
    });
  }
</script>

<style>
  mark {
    padding: 2px 4px;
    border-radius: 3px;
  }

  @keyframes spin {
    to { transform: rotate(360deg); }
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }
</style>