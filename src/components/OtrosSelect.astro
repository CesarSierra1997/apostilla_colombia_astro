---
const OTROS_OPTIONS = [
  {
    label: "Otros Servicios",
    url: "/#otros_servicios",
  },
  {
    label: "Buscador",
    url: "/buscar",
    icon: "fa-solid fa-magnifying-glass",
  },
];
---

<div class="relative mr-1 ml-1">
  <a
    id="otros-toggle"
    type="button"
    aria-haspopup="true"
    aria-expanded="false"
    class="flex items-center gap-1 py-2 rounded-md hover:scale-105 transition-all duration-300 cursor-pointer"
  >
    <span>Otros</span>
    <svg
      id="otros-chevron"
      xmlns="http://www.w3.org/2000/svg"
      class="w-4 h-4 transition-transform duration-200"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M19 9l-7 7-7-7"></path>
    </svg>
  </a>

  <div
    id="otros-menu"
    class="absolute left-0 z-20 hidden w-max mt-2 rounded-md border border-gray-200 shadow-lg bg-gray-400/90 text-sm p-1"
    role="menu"
  >
    <ul id="lista-otros" >
      {
        OTROS_OPTIONS.map((item) => (
          <li role="none" id="lista-otros">
            <a
              id="lista-otros"
              role="menuitem"
              href={item.url}
              class="block px-3 py-2 rounded-sm hover:bg-red-600/30 transition-colors"
            >
              {item.label}
              {item.icon && <i class={item.icon}></i>}

            </a>
          </li>
        ))
      }
    </ul>
  </div>
</div>

<style>
  #otros-menu.open {
    display: block;
    animation: scale-up 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  @keyframes scale-up {
    from {
      transform: scale(0.96);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  .destacar-opcion {
    font-weight: 600;
    font-size: 15px;
  }
</style>

<script>
  const btn = document.getElementById("otros-toggle");
  const menu = document.getElementById("otros-menu");
  const chevron = document.getElementById("otros-chevron");
  const text = document.getElementById("otros-text");
  let isOpen = false;

  // Toggle menu
  const toggleMenu = () => {
    isOpen = !isOpen;
    menu?.classList.toggle("open", isOpen);
    btn?.setAttribute("aria-expanded", String(isOpen));
    if (chevron) chevron.style.transform = isOpen ? "rotate(180deg)" : "";
  };

  // Close menu
  const closeMenu = () => {
    if (!isOpen) return;
    isOpen = false;
    menu?.classList.remove("open");
    btn?.setAttribute("aria-expanded", "false");
    if (chevron) chevron.style.transform = "";
  };

  // Handle scroll color change
  const handleScroll = () => {
    if (!text) return;
    const scrolled = window.scrollY > 50;
    const isDark = document.documentElement.classList.contains("dark");

    if (scrolled) {
      text.className = isDark
        ? "text-gray-200 transition-colors duration-300"
        : "text-gray-800 transition-colors duration-300";
    } else {
      text.className =
        "text-purple-600 dark:text-purple-400 transition-colors duration-300";
    }
  };

  // Event listeners
  btn?.addEventListener("click", (e) => {
    e.preventDefault();
    e.stopPropagation();
    toggleMenu();
  });

  // Cerrar menú al hacer clic en un enlace
  menu?.addEventListener("click", (e) => {
    const target = e.target as HTMLElement;
    if (target.closest("a")) {
      closeMenu();
    }
  });

  // Cerrar menú al hacer clic fuera
  document.addEventListener("click", (e) => {
    if (
      e.target instanceof Element &&
      !menu?.contains(e.target) &&
      !btn?.contains(e.target)
    ) {
      closeMenu();
    }
  });

  // Cerrar menú con tecla Escape
  document.addEventListener("keydown", (e) => {
    if ((e.key === "Escape" || e.key === "Esc") && isOpen) {
      closeMenu();
      btn?.focus();
    }
  });

  // Scroll listener
  window.addEventListener("scroll", handleScroll);

  // Theme change listener
  const observer = new MutationObserver(handleScroll);
  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ["class"],
  });

  // Initial check
  handleScroll();

  // Cleanup on navigation
  document.addEventListener("astro:before-swap", () => {
    window.removeEventListener("scroll", handleScroll);
    observer.disconnect();
  });
</script>