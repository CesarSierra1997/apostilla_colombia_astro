---
const APOSTILLA_OPTIONS = [
  { 
    label: "Apostilla Legalización", 
    url: "/servicios/apostilla_legalizacion" 
  },
  { 
    label: "Apostilla Documentos Académicos", 
    hasSubmenu: true,
    submenu: [
      { label: "Universidad", url: "/servicios/universidad" },
      { label: "Colegio", url: "/servicios/bachiller" }
    ]
  },
  // { 
  //   label: "Apostilla Documentos Juduiciales", 
  //   url: "/#apostilla-judicial" 
  // },
  // { 
  //   label: "Apostilla Registro Civil", 
  //   url: "/#apostilla-exterior" 
  // },
];
---

<div class="relative ml-1 mr-1">
  <a
    id="apostilla-toggle"
    type="button"
    aria-haspopup="true"
    aria-expanded="false"
    class="flex items-center gap-2 px-2 py-2 rounded-md hover:scale-105 transition-all duration-300 cursor-pointer"
  >
    <span>
      Apostilla
    </span>
    <svg 
      id="apostilla-chevron" 
      xmlns="http://www.w3.org/2000/svg" 
      class="w-4 h-4 transition-transform duration-200" 
      viewBox="0 0 24 24" 
      fill="none" 
      stroke="currentColor"
    >
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
    </svg>
  </a>

  <div
    id="apostilla-menu"
    class="absolute left-0 z-20 hidden w-64 mt-2 rounded-md border border-gray-200 dark:border-gray-700 shadow-lg bg-gray-400/90 text-sm p-1"
    role="menu"
  >
    <ul id="lista-apostilla">
      {APOSTILLA_OPTIONS.map((item, index) => (
        <li role="none" class="relative" id="lista-apostilla">
          {item.hasSubmenu ? (
            <>
              <button
                id="lista-apostilla"
                data-submenu-trigger={index}
                class="w-full flex items-center justify-between px-3 py-2 rounded-sm text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-left"
              >
                <span>{item.label}</span>
                <svg 
                  class="w-4 h-4 transition-transform duration-200" 
                  data-submenu-icon={index}
                  xmlns="http://www.w3.org/2000/svg" 
                  viewBox="0 0 24 24" 
                  fill="none" 
                  stroke="currentColor"
                >
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
              <div
                data-submenu={index}
                class="hidden ml-2 mt-1 space-y-1 pl-2 border-l-2 border-gray-200 dark:border-gray-700"
              >
                {item.submenu?.map((subitem) => (
                  <a
                    id="lista-apostilla"
                    role="menuitem"
                    href={subitem.url}
                    class="block px-3 py-2 rounded-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors text-sm"
                  >
                    {subitem.label}
                  </a>
                ))}
              </div>
            </>
          ) : (
            <a
              id="lista-apostilla"
              role="menuitem"
              href={item.url}
              class="block px-3 py-2 rounded-sm text-gray-800 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
            >
              {item.label}
            </a>
          )}
        </li>
      ))}
    </ul>
  </div>
</div>

<style>
  #apostilla-menu.open {
    display: block;
    animation: scale-up 0.15s cubic-bezier(0.25, 0.46, 0.45, 0.94) both;
  }

  [data-submenu].open {
    display: block;
    animation: slide-down 0.2s ease-out both;
  }

  @keyframes scale-up {
    from {
      transform: scale(0.96);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes slide-down {
    from {
      opacity: 0;
      transform: translateY(-4px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>

<script>
  const btn = document.getElementById("apostilla-toggle");
  const menu = document.getElementById("apostilla-menu");
  const chevron = document.getElementById("apostilla-chevron");
  const text = document.getElementById("apostilla-text");
  let isOpen = false;
  const openSubmenus = new Set<number>();

  // Toggle menu principal
  const toggleMenu = () => {
    isOpen = !isOpen;
    menu?.classList.toggle("open", isOpen);
    btn?.setAttribute("aria-expanded", String(isOpen));
    if (chevron) chevron.style.transform = isOpen ? "rotate(180deg)" : "";
    
    // Cerrar todos los submenús al cerrar el menú principal
    if (!isOpen) {
      closeAllSubmenus();
    }
  };

  // Close menu principal
  const closeMenu = () => {
    if (!isOpen) return;
    isOpen = false;
    menu?.classList.remove("open");
    btn?.setAttribute("aria-expanded", "false");
    if (chevron) chevron.style.transform = "";
    closeAllSubmenus();
  };

  // Toggle submenu
  const toggleSubmenu = (index: number) => {
    const submenu = document.querySelector(`[data-submenu="${index}"]`);
    const icon = document.querySelector(`[data-submenu-icon="${index}"]`) as HTMLElement;
    
    if (!submenu) return;
    
    const isSubmenuOpen = openSubmenus.has(index);
    
    if (isSubmenuOpen) {
      openSubmenus.delete(index);
      submenu.classList.remove("open");
      if (icon) icon.style.transform = "";
    } else {
      openSubmenus.add(index);
      submenu.classList.add("open");
      if (icon) icon.style.transform = "rotate(90deg)";
    }
  };

  // Cerrar todos los submenús
  const closeAllSubmenus = () => {
    openSubmenus.forEach(index => {
      const submenu = document.querySelector(`[data-submenu="${index}"]`);
      const icon = document.querySelector(`[data-submenu-icon="${index}"]`) as HTMLElement;
      submenu?.classList.remove("open");
      if (icon) icon.style.transform = "";
    });
    openSubmenus.clear();
  };

  // Handle scroll color change
  const handleScroll = () => {
    if (!text) return;
    const scrolled = window.scrollY > 50;
    const isDark = document.documentElement.classList.contains('dark');
    
    if (scrolled) {
      text.className = isDark 
        ? "text-gray-200 transition-colors duration-300"
        : "text-gray-800 transition-colors duration-300";
    } else {
      text.className = "text-purple-600 dark:text-purple-400 transition-colors duration-300";
    }
  };

  // Event listeners
  btn?.addEventListener("click", (e) => {
    e.preventDefault();
    e.stopPropagation();
    toggleMenu();
  });

  // Listener para submenús
  document.querySelectorAll("[data-submenu-trigger]").forEach((trigger) => {
    trigger.addEventListener("click", (e) => {
      e.stopPropagation();
      const index = parseInt((e.currentTarget as HTMLElement).getAttribute("data-submenu-trigger") || "0");
      toggleSubmenu(index);
    });
  });

  menu?.addEventListener("click", (e) => {
    const target = e.target as HTMLElement;
    // Solo cerrar si es un enlace (no un botón de submenú)
    if (target.closest("a") && !target.closest("[data-submenu-trigger]")) {
      closeMenu();
    }
  });

  document.addEventListener("click", (e) => {
    if (e.target instanceof Element && !menu?.contains(e.target) && !btn?.contains(e.target)) {
      closeMenu();
    }
  });

  document.addEventListener("keydown", (e) => {
    if ((e.key === "Escape" || e.key === "Esc") && isOpen) {
      closeMenu();
      btn?.focus();
    }
  });

  // Scroll listener
  window.addEventListener("scroll", handleScroll);
  
  // Theme change listener
  const observer = new MutationObserver(handleScroll);
  observer.observe(document.documentElement, { 
    attributes: true, 
    attributeFilter: ['class'] 
  });

  // Initial check
  handleScroll();

  // Cleanup on navigation
  document.addEventListener("astro:before-swap", () => {
    window.removeEventListener("scroll", handleScroll);
    observer.disconnect();
  });
</script>